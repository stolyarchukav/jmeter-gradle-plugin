import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

//--- Plugins ---
plugins {
    id 'groovy'
    id 'maven-publish'
	id "com.gradle.plugin-publish" version "0.13.0"
    id "java-gradle-plugin"
    id 'com.github.ben-manes.versions' version '0.36.0'
    id 'ru.vyarus.quality' version '4.4.0'
    id 'com.bmuschko.clover' version '3.0.1'
    id 'org.owasp.dependencycheck' version '6.1.0'
}

//--- Project information ---
group = 'org.stolyarchuk'
archivesBaseName = 'jmeter-gradle-plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext.thisPluginVersion="1.3.1"
ext.jmVersion = "5.4.1"
version = "$thisPluginVersion-$jmVersion"

//--- Repositories ---
repositories {
    mavenCentral()
//    maven{ url 'https://repository.apache.org/content/repositories/releases'}
}

//--- Dependencies ---
configurations.all {
    resolutionStrategy {
        force "org.codehaus.groovy:groovy-all:2.5.14"
    }
}
dependencies {
    implementation gradleApi()
    implementation 'xml-apis:xml-apis:1.0.b2'
    implementation 'org.apache.ant:ant:1.10.9'
    implementation 'org.rendersnake:rendersnake:1.9.0'
    implementation 'org.beanshell:bsh-core:2.0b4'
    implementation 'commons-httpclient:commons-httpclient:3.1'

    ['win', 'linux', 'mac'].each { platform ->
        implementation "org.openjfx:javafx-base:11:${platform}"
        implementation "org.openjfx:javafx-graphics:11:${platform}"
        implementation "org.openjfx:javafx-controls:11:${platform}"
        implementation "org.openjfx:javafx-swing:11:${platform}"
    }

    //jm-plugins dependencies
    [
            'kg.apc:jmeter-plugins-casutg:2.9',
            'kg.apc:jmeter-plugins-cmd:2.2',
            'kg.apc:jmeter-plugins-webdriver:3.3',
            'kg.apc:jmeter-plugins-perfmon:2.1',
            'kg.apc:jmeter-plugins-udp:0.4',
            'kg.apc:jmeter-plugins-graphs-basic:2.0',
            'kg.apc:jmeter-plugins-graphs-composite:2.0',
            'kg.apc:jmeter-plugins-graphs-dist:2.0',
            'kg.apc:jmeter-plugins-graphs-additional:2.0',
            'kg.apc:jmeter-plugins-graphs-ggl:2.0',
            'net.luminis.jmeter:jmeter-websocket-samplers:1.2.8',
    ].each {
        implementation(it){
            exclude group: 'commons-math3', module: 'commons-math3'
            exclude group: 'commons-pool2', module: 'commons-pool2'
            exclude group: 'xml-apis', module: 'xml-apis'
        }
    }

    //jm dependencies
    implementation("org.apache.jmeter:ApacheJMeter_components:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_http:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_jdbc:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_core:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_tcp:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_java:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_mail:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_ldap:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_ftp:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_functions:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_jms:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_config:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_junit:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_mongodb:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_native:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter:${jmVersion}")
    implementation("org.apache.jmeter:jorphan:${jmVersion}")

	testImplementation "junit:junit:4.13.2"

    clover 'org.openclover:clover:4.4.1'
}

configurations {
    implementation.exclude group: "org.apache.jmeter", module: "bom"
}

//--- Tasks ---
task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

processResources.doLast {
    ant.replace(
            file: "${project.buildDir}/resources/main/jmeter-plugin.properties",
            token: "@jmeter.version@",
            value: "$jmVersion"
    )
	ant.replace(
			file: "${project.buildDir}/resources/main/jmeter-plugin.properties",
			token: "@thisPlugin.version@",
			value: "$version"
	)
}

//--- mvn-publish ---
def pomConfig = {
	scm {
		url 'scm:git@github.com:stolyarchukav/jmeter-gradle-plugin.git'
		connection 'scm:git@github.com:stolyarchukav/jmeter-gradle-plugin.git'
		developerConnection 'scm:git@github.com:stolyarchukav/jmeter-gradle-plugin.git'
	}
	licenses {
		license {
			name 'The Apache Software License, Version 2.0'
			url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			distribution 'repo'
		}
	}
	developers {
		developer {
			id 'stolyarchuk'
			name 'Andrey Stolyarchuk'
			url 'http://github.com/stolyarchukav'
			email 'stolyarchukav@gmail.com'
			roles { role 'Developer' }
		}
	}
}

publishing {
    repositories {
        maven {
            name = 'localPluginRepository'
            url = '../local-plugin-repository'
        }
    }
}

gradlePlugin {
    plugins {
        jmeterPlugin {
            id = 'org.stolyarchuk.jmeter-gradle-plugin'
            implementationClass = 'net.foragerr.jmeter.gradle.plugins.JMPlugin'
        }
    }
}

pluginBundle {
    website = 'http://jmeter.foragerr.net'
    vcsUrl = 'https://github.com/stolyarchukav/jmeter-gradle-plugin.git'
    description = 'A Gradle plugin for running JMeter tests'
    tags = ['jmeter', 'performance', 'java8']

    plugins {
        jmeterPlugin {
          displayName = 'JMeter Gradle Plugin'
      }
    }
}

check.dependsOn dependencyCheckAggregate
dependencyCheck {
    skipConfigurations = [
            'developmentOnly',
            'testImplementation',
            'testRuntimeOnly',
            'clover',
            'codenarc',
    ]
}

clover {
    report {
        html = true
        xml = true
    }
}

afterEvaluate {
    codenarc {
        maxPriority1Violations = 0
        maxPriority2Violations = 100
        maxPriority3Violations = 200
    }
}
